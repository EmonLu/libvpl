name: Windows Build
run-name: Windows Build (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on: 
  workflow_dispatch:
    inputs:
      COVERITY_HOST:
        description: 'COVERITY_HOST'
        required: true
        type: string
      AD_USR:
        description: 'AD_USR'
        required: true
        type: string
      AD_USR_EMAIL:
        description: 'AD_USR_EMAIL'
        required: true
        type: string
      COVERITY_STREAM:
        description: 'COVERITY_STREAM'
        required: true
        type: string
      COVERITY_PROJECT:
        description: 'COVERITY_PROJECT'
        required: true
        type: string
      COVERITY_OPTS:
        description: 'COVERITY_OPTS'
        required: false
        default: ''
        type: string
  workflow_call:
    inputs:
      COVERITY_HOST:
        description: 'COVERITY_HOST'
        required: true
        type: string
      AD_USR:
        description: 'AD_USR'
        required: true
        type: string
      AD_USR_EMAIL:
        description: 'AD_USR_EMAIL'
        required: true
        type: string
      COVERITY_STREAM:
        description: 'COVERITY_STREAM'
        required: true
        type: string
      COVERITY_PROJECT:
        description: 'COVERITY_PROJECT'
        required: true
        type: string
      COVERITY_OPTS:
        description: 'COVERITY_OPTS'
        required: false
        default: ''
        type: string
  
jobs:
  scan:
    runs-on: [self-hosted, Windows, CMake, vs2022, coverity]
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3
        with:
          path: source
      - name: Scan
        run: |
          pushd source
          cmake -B _build -DENABLE_WARNING_AS_ERROR=ON -DBUILD_TESTS=ON -DBUILD_PYTHON_BINDING=OFF
          if($LASTEXITCODE -ne 0)
          {
              Exit $LASTEXITCODE
          }
          mkdir _reports
          & script\coverity-scan.bat `
            --url "${{ inputs.COVERITY_HOST }}" `
            --user "${{ inputs.AD_USR }}" `
            --password "${{ secrets.AD_PW }}" `
            --email "${{ inputs.AD_USR_EMAIL }}" `
            --stream "${{ inputs.COVERITY_STREAM }}" `
            --project "${{ inputs.COVERITY_PROJECT }}" `
            --project-name "oneVPL" `
            --dir "int_dir" `
            --report-dir "_reports" `
            --strip-path "." `
            --code-version "${{ github.sha }}" `
            --bu "AXG" `
            --description "${{ github.ref_name }}" `
            ${{ inputs.COVERITY_OPTS}} `
            cmake --build _build --verbose --config Release
          if($LASTEXITCODE -ne 0)
          {
            Exit $LASTEXITCODE
          }
          popd
      - name: Record Artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: windows-coverity-scan
          path: source\_reports\*
      - name: Cleanup
        if: always()
        run: |
          Remove-Item -Recurse -Force source
