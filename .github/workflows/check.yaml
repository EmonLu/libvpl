name: Check
run-name: Check (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on:
  pull_request:
  workflow_call:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  vars:
    name: Configure Variables
    runs-on: [self-hosted, linux]
    outputs:
      refrence_ref: ${{ steps.run.outputs.refrence_ref }}
    steps:
      - name: Cleanup workspace
        run: >
          cd ${{github.workspace}} &&
          sudo rm -rf ..?* .[!.]* *
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: source
          fetch-depth: 0
          ref: '${{ github.event.pull_request.head.sha }}'
      - name: Build variables
        id: run
        run: |
          cd source
          echo "refrence_ref=$(git describe --abbrev=0 --tags --match=v*)"
          echo "refrence_ref=$(git describe --abbrev=0 --tags --match=v*)" >> $GITHUB_OUTPUT
      - name: Cleanup workspace
        run: >
          cd ${{github.workspace}} &&
          sudo rm -rf ..?* .[!.]* *
  lint:
    name: Lint
    runs-on: [self-hosted, linux, docker]
    steps:
      - name: Cleanup workspace
        run: >
          cd ${{github.workspace}} &&
          sudo rm -rf ..?* .[!.]* *
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: source
          ref: '${{ github.event.pull_request.head.sha }}'
      - name: Create Docker Image
        run: >
          docker build "source/script"
          -f "source/script/Dockerfile.ubuntu.build"
          -t vpl_build:ubuntu
      - name: Lint source in container
        run: |
          cat <<'EOL' > lint.sh
          #!/bin/bash
          set -x
          set -o pipefail
          source/script/test lint | tee lint.log
          ret=$?
          set +o pipefail
          exit $ret
          EOL
          chmod +x lint.sh

          docker run --rm -v $(pwd):/tmp/work -w /tmp/work \
          vpl_build:ubuntu ./lint.sh
      - name: Report
        if: success() || failure()
        run: |
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat lint.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

  build:
    name: ${{ matrix.os }} ${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release, debug]
    uses: ./.github/workflows/build.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}
      CONFIG: ${{ matrix.config }}
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build

  ref-build:
    name: ${{ needs.vars.outputs.refrence_ref }} ${{ matrix.os }} release
    needs: [vars]
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
    uses: ./.github/workflows/build.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}
      CONFIG: release
      ARTIFACT: ref-${{ matrix.os }}-release-build
      REF: ${{ needs.vars.outputs.refrence_ref }}

  diff-report:
    name: ${{ matrix.os }} diff-report
    needs: [vars, ref-build, build]
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
    uses: ./.github/workflows/diff-report.yaml
    secrets: inherit
    with:
      ARTIFACT: ${{ matrix.os }}-diff-report
      LEFT: ref-${{ matrix.os }}-release-build
      RIGHT: ${{ matrix.os }}-release-build

  linux-distro-support:
    name: Linux Distro Support
    needs: build 
    uses: ./.github/workflows/linux-distro-support.yaml
    secrets: inherit
    with:
      TEST_REPO: ${{ inputs.TEST_REPO }}  
      ARTIFACT: operating_systems

  package-test:
    name: ${{ matrix.os }} ${{ matrix.config }}, ${{ matrix.accelerator }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release, debug]
          accelerator: [gen12.5, gen9.5]
    uses: ./.github/workflows/acceptance.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}
      CONFIG: ${{ matrix.config }}
      GPU_FAMILY: ${{ matrix.accelerator }}
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build
      NONFATAL: ${{ matrix.CONFIG == 'debug' && true || false }}

  compiler-settings:
    name: ${{ matrix.os }} ${{ matrix.config }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release]
    uses: ./.github/workflows/compiler-settings.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build
      NONFATAL: ${{ matrix.CONFIG == 'debug' && true || false }}

  ip-leak-scan:
    name: IP Leak Scan
    uses: ./.github/workflows/ip-leak-scan.yaml
    secrets: inherit

  binary-malware-scan:
    name: Malware Scan ${{ matrix.os }} ${{ matrix.config }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release]
    uses: ./.github/workflows/malware-scan.yaml
    secrets: inherit
    with:
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build

  source-malware-scan:
    name: Malware Scan Source
    uses: ./.github/workflows/malware-scan.yaml
    secrets: inherit

  vulnerability-scan:
    name: combined release
    needs: build
    uses: ./.github/workflows/vulnerability-scan.yaml
    secrets: inherit

  coverity-linux:
    name: Linux Coverity Scan
    uses: ./.github/workflows/coverity-linux.yaml
    secrets: inherit
    with:
      COVERITY_HOST: ${{ vars.COVERITY_HOST }}
      AD_USR: ${{ vars.AD_USR }}
      AD_USR_EMAIL: ${{ vars.AD_USR_EMAIL }}
      COVERITY_STREAM: ${{ vars.COVERITY_STREAM }}
      COVERITY_PROJECT: ${{ vars.COVERITY_PROJECT }}

  coverity-windows:
    name: Windows Coverity Scan
    uses: ./.github/workflows/coverity-windows.yaml
    secrets: inherit
    with:
      COVERITY_HOST: ${{ vars.COVERITY_HOST }}
      AD_USR: ${{ vars.AD_USR }}
      AD_USR_EMAIL: ${{ vars.AD_USR_EMAIL }}
      COVERITY_STREAM: ${{ vars.COVERITY_STREAM }}
      COVERITY_PROJECT: ${{ vars.COVERITY_PROJECT }}

  dynamic-analysis:
    name: Dynamic Analysis
    needs: build
    uses: ./.github/workflows/dynamic-analysis.yaml
    secrets: inherit
    with:
      ARTIFACT: linux-release-build

  summary:
    name: Summary
    needs: 
      - ip-leak-scan
      - build
      - package-test
      - compiler-settings
      - coverity-linux
      - coverity-windows
      - vulnerability-scan
      - linux-distro-support
      - diff-report
      - dynamic-analysis
      - binary-malware-scan
      - source-malware-scan
    uses: ./.github/workflows/release-summary.yaml
    secrets: inherit

  required:
    needs:
      - lint
      - build
      - linux-distro-support
      - package-test
      - compiler-settings
      - ip-leak-scan
      - vulnerability-scan
      - coverity-linux
      - coverity-windows
      - dynamic-analysis
      - binary-malware-scan
      - source-malware-scan
      - summary
    runs-on: [self-hosted]
    steps:
      - name: Dummy step
        run: cd ${{github.workspace}}
